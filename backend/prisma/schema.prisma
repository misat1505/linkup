// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  firstName   String
  lastName    String
  photoURL    String?
  lastActive  DateTime
  login       String    @unique
  password    String
  salt        String

  posts       Post[]    @relation("UserPosts")
  chats       Chat[]    @relation("UserChats")
  messages    Message[] @relation("MessageAuthor")
  reactions   UserReaction[]

  sentRequests      Friend[] @relation("UserSentRequests")
  receivedRequests  Friend[] @relation("UserReceivedRequests")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}

model Friend {
  requesterId String
  acceptorId  String
  status      FriendshipStatus

  requester   User @relation("UserSentRequests", fields: [requesterId], references: [id])
  acceptor    User @relation("UserReceivedRequests", fields: [acceptorId], references: [id])

  @@id([requesterId, acceptorId])
}

model Post {
  id          String    @id @default(uuid())
  content     String
  authorId    String
  createdAt   DateTime  @default(now())
  chatId      String    @unique

  author      User      @relation("UserPosts", fields: [authorId], references: [id])
  chat        Chat      @relation("PostChat", fields: [chatId], references: [id])
  files       File[]    @relation("PostFiles")
}

enum ChatType {
  GROUP
  PRIVATE
  POST
}

model Chat {
  id        String      @id @default(uuid())
  createdAt DateTime    @default(now())
  photoURL  String?
  type      ChatType
  lastMessageId String? @unique

  users     User[]      @relation("UserChats")
  post      Post?       @relation("PostChat")
  messages  Message[]   @relation("MessageChat")
  lastMessage  Message?  @relation("LastMessageInChat", fields: [lastMessageId], references: [id])
}

model Message {
  id          String    @id @default(uuid())
  content     String?
  authorId    String
  createdAt   DateTime  @default(now())
  responseId  String?
  chatId      String

  chat        Chat      @relation("MessageChat", fields: [chatId], references: [id])
  author      User      @relation("MessageAuthor", fields: [authorId], references: [id])
  response    Message?  @relation("MessageResponses", fields: [responseId], references: [id])
  replies     Message[] @relation("MessageResponses")
  files       File[]    @relation("MessageFiles")
  reactions   UserReaction[]
  Chat        Chat?     @relation("LastMessageInChat")
}

model File {
  id          String    @id @default(uuid())
  url         String    @unique
  messageId   String?
  postId      String?

  message     Message? @relation("MessageFiles", fields: [messageId], references: [id])
  post        Post?    @relation("PostFiles", fields: [postId], references: [id])
}

model Reaction {
  id          String    @id @default(uuid())
  name        String
  userReactions UserReaction[]
}

model UserReaction {
  userId      String
  messageId   String
  reactionId  String

  user        User      @relation(fields: [userId], references: [id])
  message     Message   @relation(fields: [messageId], references: [id])
  reaction    Reaction  @relation(fields: [reactionId], references: [id])

  @@id([userId, messageId])
}
